//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputActionCharacter.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActionCharacter: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActionCharacter()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActionCharacter"",
    ""maps"": [
        {
            ""name"": ""KyMouse"",
            ""id"": ""0fecae29-2d71-44c9-9281-7c0d51c0ef4e"",
            ""actions"": [
                {
                    ""name"": ""Walking"",
                    ""type"": ""PassThrough"",
                    ""id"": ""3538803e-fcb5-4bc8-9a36-c46e062722e6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pinch"",
                    ""type"": ""Button"",
                    ""id"": ""163bf6bb-1e57-4feb-9211-f4f85bb0d838"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interactive"",
                    ""type"": ""Button"",
                    ""id"": ""7ec0e8f3-23a1-4b6a-a0e0-5464df984129"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""bcb79222-e082-4c77-a2dd-331151524c38"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walking"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""72a20c09-7466-4ccd-b8f8-5be60dc172b2"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walking"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c436e673-7b05-4a1a-b33d-0afbe5f8b79f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walking"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""43b3fc1e-7c71-4ab8-842c-ddd368991a3e"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walking"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""30b4176b-ffb3-4166-9c40-8270540bca1a"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walking"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""fbf25cc9-4e2b-456e-92d9-fab367b72c61"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pinch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e844d5d2-fa15-4708-b65a-f3555914dc83"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interactive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // KyMouse
        m_KyMouse = asset.FindActionMap("KyMouse", throwIfNotFound: true);
        m_KyMouse_Walking = m_KyMouse.FindAction("Walking", throwIfNotFound: true);
        m_KyMouse_Pinch = m_KyMouse.FindAction("Pinch", throwIfNotFound: true);
        m_KyMouse_Interactive = m_KyMouse.FindAction("Interactive", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // KyMouse
    private readonly InputActionMap m_KyMouse;
    private List<IKyMouseActions> m_KyMouseActionsCallbackInterfaces = new List<IKyMouseActions>();
    private readonly InputAction m_KyMouse_Walking;
    private readonly InputAction m_KyMouse_Pinch;
    private readonly InputAction m_KyMouse_Interactive;
    public struct KyMouseActions
    {
        private @InputActionCharacter m_Wrapper;
        public KyMouseActions(@InputActionCharacter wrapper) { m_Wrapper = wrapper; }
        public InputAction @Walking => m_Wrapper.m_KyMouse_Walking;
        public InputAction @Pinch => m_Wrapper.m_KyMouse_Pinch;
        public InputAction @Interactive => m_Wrapper.m_KyMouse_Interactive;
        public InputActionMap Get() { return m_Wrapper.m_KyMouse; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KyMouseActions set) { return set.Get(); }
        public void AddCallbacks(IKyMouseActions instance)
        {
            if (instance == null || m_Wrapper.m_KyMouseActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_KyMouseActionsCallbackInterfaces.Add(instance);
            @Walking.started += instance.OnWalking;
            @Walking.performed += instance.OnWalking;
            @Walking.canceled += instance.OnWalking;
            @Pinch.started += instance.OnPinch;
            @Pinch.performed += instance.OnPinch;
            @Pinch.canceled += instance.OnPinch;
            @Interactive.started += instance.OnInteractive;
            @Interactive.performed += instance.OnInteractive;
            @Interactive.canceled += instance.OnInteractive;
        }

        private void UnregisterCallbacks(IKyMouseActions instance)
        {
            @Walking.started -= instance.OnWalking;
            @Walking.performed -= instance.OnWalking;
            @Walking.canceled -= instance.OnWalking;
            @Pinch.started -= instance.OnPinch;
            @Pinch.performed -= instance.OnPinch;
            @Pinch.canceled -= instance.OnPinch;
            @Interactive.started -= instance.OnInteractive;
            @Interactive.performed -= instance.OnInteractive;
            @Interactive.canceled -= instance.OnInteractive;
        }

        public void RemoveCallbacks(IKyMouseActions instance)
        {
            if (m_Wrapper.m_KyMouseActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IKyMouseActions instance)
        {
            foreach (var item in m_Wrapper.m_KyMouseActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_KyMouseActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public KyMouseActions @KyMouse => new KyMouseActions(this);
    public interface IKyMouseActions
    {
        void OnWalking(InputAction.CallbackContext context);
        void OnPinch(InputAction.CallbackContext context);
        void OnInteractive(InputAction.CallbackContext context);
    }
}
